●트리
리스트와 스택, 큐는 자료들이 선의 형태로 나열되어 있는 구조를 가진 선형 자료구조(Linear Data Structure)였다.
자료들이 나열된 구조가 선형이 아닌 자료구조를 비선형 자료구조라고 하는데, 트리(tree)는 비선형 자료구조 중에서
자료들 간에 계층관계를 가진 계층형 자료구조(Hierarchical Data Structrue)다.

트리를 구성하는 원소(자료)를 "노드"라고 하고 노드를 연결하는 선을 "간선"(edge)이라 한다.
트리의 시작 노드를 루트 노드(Root Node)라 하고 레벨(levl) 0이 된다. 같은 부모노드의 자식노드들은 서로 형제노드가 된다.
한 노드에서 간선을 따라 루트 노드까지 이리는 경로에 있는 노드들은 모두 그 노드의 조상 노드가 된다.
자식노드들은 각각 독립하여 새로운 트리를 구성 할 수 있으므로 각 노드는 자식노드 수만큼 서브 트리를 갖는다.
한 노드의 자손 노드들은 그 노드의 서브 트리에 있는 노드들이 된다.

한 노드가 가지는 서브 트리의 수, 즉 자식노드의 수를 그 노드의 차수라 한다.
한 노드의 높이는 루트에서 그 노드에 이르는 경로에 있는 간선의 수가 되고, 노드의 높이 중에서 가장 큰 높이,
즉 최대 레벨이 그 트리의 전체 높이가 된다.

●이진트리
1, 이진 트리의 개요
트리의 노드 구조를 일정하게 정의하면 트리의 연산이 단화화되어 쉬워진다. 
그래서 모든 노드의 차수를 2 이하로 정하여 전체 트리의 차수가 2이하가 되도록 만든 것이 이진 트리(Binary Tree)다.

이진 트리는 왼쪽 자식노드와 오른쪽 자식노드 2개만을 가질 수 있으며, 공백 노드도 이진 트리의 노드로 취급한다.
왼쪽 자식노드와 공백 노드인 오른쪽 자식노드를 가진 이진 트리이며 공백 노드를 왼쪽 자식노드로 가지고 있는 이진 트리가 된다.
자식노드가 없는 단말 노드는 왼쪽 자식노드와 오른쪽 자식노드가 모두 공백 노드인 이진 트리다

이진 트리에 있는 모든 노드는 왼쪽 자식노드를 루트로 하는 왼쪽 서브 트리와 오른쪽 자식 노드를 루트로 하는 오른쪽 서브 트리를 가진다
그리고 이진 트리의 서브 트리들 역시 모두 이진 트리여야 한다.

이진 트리는 루트 A의 왼쪽 자식노드 B를 루트로 하는 왼쪽 서브 트리와 오른쪽 자식노드 C를 루트로 하는 오른쪽 서브 트리가 있다.
그리고 왼쪽 서브 트리의 루트 B는 왼쪽 자식노드 D를 루트로 하는 왼쪽 서브 트리와 오른쪽 자식노드 E를 루트로 하는 오른쪽 서브 트리를 가지고 있다.
마찬가지로 오른쪽 서브 트리의 루트 C는 왼족 자식노드F를 루트로 하는 왼쪽 서브 트리와 오른쪽 자식노드 G를 루트로 하는 오른쪽 서브 트리를 가진다.

2, 이진 트리의 추상 자료형
이진 트리의 추상 자료형에 따라서 만들어진 이진 트리가 갖는 특징을 다음과 같이 정의할 수 있다.
[정의 1] n개의 노드를 가진 이진 트리는 항상(n-1)개의 간선을 가진다.
이진 트리에서 루트 이외의 모든 노드는 한 개의 부모노드를 가지므로 부모노드와 연결하는 한 개의 간선을 갖는다.
따라서 n개의 노드로 구성된 이진 트리에서 루트를 제외한 나머지 노드의 개수가(n-1)개 이므로(n-1)개의 간선이 있게 된다.
[정의 2] 높이가 h인 이진 트리가 가질 수 있는 노드의 최소 개수는 (h+1)개가 되며, 최대개수는 (2^h+1 - 1)개가 된다.
이진 트리의 높이가 h가 되려면 한 레벨에 최소한 한 개의 노드가 있어야 하므로 높이가 h인 이진 트리의 최소 노드의 개수는(h+1)개가 된다.
그리고 하나의 노드는 최대 2개의 자식 노드를 가질 수 있으므로 레벨 i에서의 노드의 최대 개수는 2^i가 된다.
따라서 높이가 h인 이진 트리 전체의 노드 개수는 2^h+1-1이 된다.

3, 이진 트리의 분류
일반적인 이진 트리 이외에 레벨과 노드 수에 대해서 일정한 관계를 가지는 이진 트리의 종류로 "포화 이진 트리"와 "완전 이진 트리"
그리고 "편향 이진 트리"가 있다.

- 포화 이진 트리
포화 이진 트리는 모든 레벨에 노드가 꽉 차서 포화 상태인 이진 트리를 의미한다. 즉 포화 이진 트리는 높이가 h일 때(2^h+1 - 1)개의
최대 노드수를 갖는 이진 트리다. 포화 이진 트리의 노드는 위치에 따라 일정한 노드 번호를 붙일 수 있다. 루트 노드를 1번으로 하고,
레벨 별로 왼쪽에서 오른쪽으로 차례로 (2^h+1 - 1)까지 번호를 붙인다.

- 완전 이진 트리
완전 이진 트리는 높이가 h고, 노드 수가 n개일 때(단, n < 2^h+1 - 1), 노드의 위치가 포화 이진 트리의 노드 1번부터
n번까지의 위치와 완전히 일치하는 이진 트리다. 따사서 완전 이진 트리에서는 (n + 1)번 부터(2^h+1 - 1)번 까지의 노드는
공백 노드가 된다. 높이가 3이고 노드의 개수가 12개인데, 노드 1번부터 12번 자리까지는 노드가 빈자리 없이
완전하게 꽉 차 있고, 13번부터 15번 노드 자리는 공백 노드므로 완전 이진 트리가 된다.

- 편향 이진 트리
이진 트리 중에서 최소 개수의 노드를 가지면서 왼쪽이나 오른쪽 서브 트리만 가지고 있는 트리를 편향 이진 트리(Skewed Binary Tree)라고 한다.

●이진 트리의 구현
이진 트리를 구현하는 방법은 배열을 이용하여 순차 자료구조 방식으로 구현하는 방법과
메모리 참조변수를 이용하여 연결 자료구조 방식으로 구현하는 방법이 있다.

1, 순차 자료구조 방식을 이용한 이진 트리의 구현
이진 트리를 배열로 표현하는 방법은 높이가 h인 포화 이진 트리의 노드번호를 배열의 인덱스로 사용하여
1차원 배열로 표현하는 것이다. 1차원 배열에서 인덱스 계산을 간단히 하기 위해서 인덱스 0번은 실제로
사용하지 않고 비워두고, 항상 인덱스 1번에 루트를 저장한다.

노드의 개수가 n개인 이진 트리를 1차원 배열을 사용하여 표현하면 각 노드의 부모노드가 저장된 배열 인덱스와
자식노드가 저장된 배열 인덱스에 대하여 다음과 같은 일정한 규칙을 찾을 수 있다.

이진 트리와 저장한 배열에서 인덱스 관계를 확인해보자. 
노드 번호가 5번이고 인덱스 5번에 저장되어 있는 노드 E의 부모 노드가 저장된 인덱스는 5/2=2번이된다.
그리고 노드 E의 왼쪽 자식 노드의 인덱스는 2 * 5 = 10번이 되고, 오른쪽 자식 노드는 (2*5)+1=11번이 된다.
루트 노드는 배열 인덱스 1번에 저장되어 있다.

2, 연결 자료구조 방식을 이용한 이진 트리의 구현
배열을 이용한 순차 자료구조 방식은 쉽게 만들 수 있으며, 인덱스 규칙에 따라 부모노드와 자식노드를 찾기도 쉽다.
그러나 메모리 공간의 사용에 있어서 완전 이진 트리의 경우에는 최적의 공간 사용이 되지만, 편향 이진 트리의 경우에는
많은 공간이 낭비된다. 이런 메모리 낭비 문제와 삽입, 삭제 연산이 비효율적이라는 순차 자료구조 방식의 문제 때문에 연결
자료구조 방식을 많이 사용한다.

이진 트리를 연결 자료구조 방식으로 표현하기 위해서 사용하는 노드의 구조는 데이터를 저장하는 데이터 필드와 왼쪽 자식노드를
연결하는 왼쪽 링크 필드, 오른쪽 자식노드를 연결하는 오른쪽 링크 필드로 구성한다. 
자식노드가 없는 경우에는 링크 필드에 null을 설정한다.

●이진 트리의 순회
- 트리를 사용하여 자료를 계층적인 구조로 저장하고, 사용하기 위해서는 트리에 있는 모든 노드를 방문하는 방법이 필요하다.
이진 트리에 있는 모든 노드를 한번씩 모두 방문하여 노드가 가지고 있는 데이터를 처리하는 것을 순회(traversal)라고 한다.
리스트나 스택, 규와 같은 선형 자료구조는 순회하는 방법이 한 가지였지만, 트리는 계층적인 구조를 가지고 있기 때문에 여라 가지 순회
방법이 있을 수 있다.

하나의 노드에서 순회를 위해 수행할 수 있는 작업을 (1)현재 노드를 방문하여 데이터를 읽는 작업 D,
(2)현재 노드의 왼쪽 서브 트리로 이동하는 작업L, (3)현재 노드의 오른쪽 서브 트리로 이동하는 작업 R로 정의한다.
그리고 서브 트리를 순회하는 순서는 항상 왼쪽 서브 트리를 먼저 방문하고, 그 후에 오른쪽 서브 트리를 방문하는 것으로 한다.
현재 노드를 방문하는 순서에 따라 전위 순회, 중위 순회, 후위 순회로 나눌 수 있다.

1, 전위 순회
- 전위 순회(Preorder Traversal)는 현재 노드를 방문하는 D 작업을 가장 먼저 수행하여 DLR의 순서로 순회하는 방법이다.
전위 순회는 트리의 모든 노드에 대해서 다음의 순회 방법을 수행하는데, 이진 트리의 왼쪽 서브 트리와 오른쪽 서브 트리 역시 이진
트리이므로 서브 트리에 대해서도 전위 순회를 재귀적으로 반복한다.
(1), 현재 노드 n을 방문한다. : D
(2), 현재 노드 n의 왼쪽 서브 트리로 이동한다. : L
(3), 현재 노드 n의 오른쪽 서브 트리로 이동한다. : R3

전위 순회 알고리즘을 사용하여 다음의 이진 트리를 순회해보자.
(1), 루트 A에서 시작하여 현재 노드 A의 데이터를 읽고, 왼쪽 서브 트리 B로 이동한다.
(2), 현재 노드 B의 데이터를 읽고, 왼쪽 서브 트리 D로 이동한다.
(3), 현재 노드 D의 데이터를 읽는다.
(4), 현재 노드 D의 왼쪽 단말 노드 H의 데이터를 일고, 오른쪽 노드인 공백 노드를 읽는 것으로 노드 D에 대한 순회가 끝난다.
이제 현재 노드 D의 이전 경로인 노드 B의 오른쪽 서브 트리 E로 이동한다.
(5), 현재 노드 E의 데이터를 읽는다.
(6), 현재 노드 E의 왼쪽 단말 노드 I의 데이터를 읽는다.
(7), 현재 노드 E의 오른쪽 단말 노드 J의 데이터를 읽는 것으로 노드 E에 대한 순회가 끝나고,
이것으로 노드 E의 이전 경로인 노드 B의 오른쪽 서브 트리의 순회가 끝난다.
(8), 다시 노드 B의 이전 경로인 노드 A로 돌아가서 노드 A의 오른쪽 서브 트리 C로 이동하여 현재 노드 C의 데이터를 읽는다.
(9), 현재 노드 C의 왼쪽 단말 노드 F의 데이터를 읽고, 오른쪽 서브 트리 G로 이동한다.
(10), 현재 노드 G의 데이터를 읽는다.
(11), 공백 노드인 왼쪽 단말 노드를 읽고, 현재 노드 G의 오른쪽 단말 노드 K의 데이터를 읽는다.
* 이것으로 이진 트리의 11개 노드에 대한 방문이 모두 끝났으므로 전위 순회를 종료한다.
전위 순회에 따른 순회 경로는 A-B-D-H-E-I-J-C-F-G-K가 되었다.
이진 트리의 전위 순회를 이용하면 수식(A*B-C/D)의 전위 표기식을 구할 수 있다.

2, 중위 순회
중위 순회는 현재 노드를 방문하는 D 작업을 L 작업과 R 작업 중간에 수행하여 LDR의 순서로 순회하는 방법이다.
중위 순회는 트리의 모든 노드에 대해서 다음의 순회 방법을 수행하는데, 서브 트리에 대해서도 중위 순회를 재귀적으로 반복한다.
(1), 현재 노드 n의 왼쪽 서브 트리로 이동한다. : L
(2), 현재 노드 n을 방문한다. : D
(3), 현재 노드 n의 오른쪽 서브 트리로 이동한다. : R

중위 순회 알고리즘을 사용하여 다음의 이진 트리를 순회해보자.
(1), 루트 A에서 시작하여 노드 A의 왼쪽 서브 트리 B로 이동한다. 현재 노드 B의 왼쪽 서브 트리 D로 이동한다.
현재 노드 D의 왼쪽 단말 노드 H의 데이터를 읽는다.
(2), 현재 노드 D의 데이터를 읽고, 오른쪽 단말 노드인 공백 노드를 읽고 이전 경로인 노드 B로 돌아 간다.
(3), 현재 노드 B의 왼쪽 서브 트리 순회가 끝났으므로 현재 노드 B의 데이터를 읽고, 오른쪽 서브 트리 E로 이동한다.
(4), 현재 노드 E의 왼쪽 단말 노드 I의 데이터를 읽는다.
(5), 현재 노드 E의 데이터를 읽는다.
(6), ==> 여기서 부터













