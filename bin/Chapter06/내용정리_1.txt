-단순연결리스트: 노드가 하나의 링크 필드에 의해서 다음 노드와 연결되는 구조를 가진 연결 리스트다.
 단순연결리스트==연결리스트==선형연결리스트==단순연결선형리스트
 물리적 순서를 유지하기 위해서 원소를 이동시키지 않고 링크필드의 참조값에 대한 연산만으로 쉽게 삽입 할수 있다는 장점이 있다.

/*
-자유공간리스트: 메모리를 사용하기 전에 미리 노드로 나누어서 연결해 놓은 리스트를 자유 공간 리스트(Free space List)라고 한다.
-getNode(): 자유공간으로부터 공백노드를 할당받아 그 메모리 주소에 대한 참조값을 반환 하는 함수
-returnNode(old): 사용이 끝난 노드를 참조변수 old를 사용하여 자유 공간 리스트에 반환하는 함수다.
 1,자유공간리스트에서 첫 번째 노드에 대한 참조값(100)을 참조변수 new에 저장하여 new가 자유공간리스트의 첫 번째 노드를 가리키게 한다.
 2,자유공간리스트에서 두 번째 노드에 대한 참조값(200)을 자유공간리스트의 변수인 Free에 저장한다.
 3,Free(자유공간리스트변수)의 첫 번째 노드는 리스트에서 의미적으로 분리된 상태이므로 new를 반환(return new;)해줌으로써 새 노드를 할당해주게 된다.
 4,returnNode(old) 함수를 이용해 사용이 끝난 노드를 참조변수 old를 사용하여 자유공간리스트에 반환한다.
 5,(new<Free, Free<Free.link, old.link<Free, Free<old)
-삽입알고리즘
 1,처음, 중간, 마지막 노드로 삽입하는 경우 3가지가 존재한다. 
 2,첫 번째 노드로 삽입하기
   2-1,삽입할 노드를 자유 공간 리스트에서 할당받는다. ==> new <- getNode();
   2-2,새 노드의 데이터 필드에 x를 저장한다. ==> new.data <- x;
   2-3,리스트 L의 첫 번째 노드에 대한 참조값을 삽입할 새 노드 new의 링크 필드에 저장 함으로써 새 노드 new를 리스트 L의 첫 번째 노드와 연결한다. ==> new link <- L;
   2-4,참조변수 L에 새 노드에 대한 참조값(700)을저장하여 L이 새 노드 new를 첫 번째 노드로 가리키도록 지정한다.
   2-5,참조변수 L은 새로삽일될 노드의 참조값(700)이 저장되고, 새로운 노드의 링크필드는 기존의 첫번째 노드의 참조값(100)을 가리켜 첫 번째 노드로 삽입한다.
 3,중간 노드로 삽입하기
   3-1,중간에 노드를 삽입하기 위해서는 삽일할 위치의 앞에 있는 선행자 노드를 알려주는 참조변수 pre가 필요하다.
   3-2,리스트 L이 공백 리스트인 경우에 수행할 연산이다. ==> if(L=null)
   	   참조변수 L에 새 노드에 대한 참조값(700)을 저장하여 새 노드 new가 리스트 L의 첫 번째 노드가 되도록 한다. ==> (L <- new);
   3-3,공백 리스트에 최초의 값이 삽입 됐으면, 새노드 new는 리스트L의 마지막 노드가 된다.
       따라서 새 노드 new의 링크 필드에 null을 저장하여 마지막 노드임을 표시한다. ==> (new.link <- null);
*/


 