/* 스택 
- 스택(stack)이란 쌓아 올린다는 의미다. 따라서 스택 자료구조라는 것은 접시를 쌓듯이 자료를 차곡차곡 쌓아 올린 형태의 구조를 말한다.
  스택의 형태는 뷔폐식당의 쌓인 접시, 책상 위에 쌓아 둔 책, 안하고 밀려서 쌓인 레포트 등 주변에서 흔히 볼 수 있다.  
  스택은 같은 구조와 크기의 자료를 top이라고 정한 한 곳으로만 쌓을 수 있고, top으로만 접근하도록 제한하여 만든 자료구조다.
  
- 스택에서는 top을 통해서 들어온 자료가 일정한 방향으로 차곡차곡 쌓인다. 삽입되는 새자료는 top이 가리키고 있는 자료의 위에 쌓인다.
  이때 새로 삽입된 자료는 스택의 마지막 자료가 되고, top이 이 자료를 가리키게 된다. 스택에서 자료를 삭제할 때도 top을 통해서
  만 가능하기 때문에 top이 가리키고 있는 스택의 마지막 자료만 삭제할 수 있다. 따라서 스택은 시간순서에 따라 자료가 쌓이고, 삭제할 때는
  가장 마지막에 삽입된 자료가 가장 먼저 삭제되는 후입선출(Lifo, Last-In-First-Out)의 구조를 갖는다.
  
- 스택에서 top을 통한 삽입 연산을 push, top을 통한 삭제 연산을 pop이라고 한다.

  1-1, 스택 S에 자료 x를 삽입하는 push() 알고리즘을 정의하면 다음과 같다.(top <- top+1;)
  스택 S에서 top이 마지막 자료를 가리키고 있으므로 그 위에 자료를 삽입하려면 먼저 top의 위치를 하나 증가시킨다.
  이때 top의 위치가 스택의 크기(stack_SIZE)보다 크다면 오버플로우(overflow) 상태가 되므로 삽입 연산을 수행하지 못하고 연산이 종료된다.
  1-2, ==> 여기서 부터
  
   
    
*/  

/* 다항식의 연결 자료구조 표현
- 다항식의 연결 자료구조 표현: 다항식에 있는 하나의 항을 하나의 노드로 표현한다. 
  각 항에 대해서 계수와 지수를 저장해야 하므로 노드의 데이터 필드는 다음과 같이 
  계수를 저장하는 coef와 지수를 저장하는 expo의 두 개의 필드로 구성하고, 링크 필드는 다음 항을 연결하는 참조변수로 구성한다.

- 연결 자료구조 다항식에서의 항 삽입 연산
  다항식 리스트 PL에 새로운 항에 대한 노드를 추가하려면 노드의 coef(계수) 필드값과 expo(지수)필드값과 노드를 추가할 위치,
  즉 리스트의 마지막 노드의 위치를 알아야 한다. 따라서 appendTerm() 함수는 다항식 리스트에 대한 참조변수 PL과
  coef 필드값을 저장한 변수 coef, expo 필드값을 저장한 변수 expo 그리고 리스트 PL의 마지막 노드의 위치를 지시하는
  참조변수 last를 매개변수로 사용 한다. 
  
  1, 다항식 PL이 공백 리스트인 경우에는 항이 하나도 없는 다항식의 경우를 나타낸다. ==> if(PL = null)
  1-1, new의 값(500)을 리스트 참조변수 PL에 저장하여 노드 new가 리스트 PL의 첫 번째 노드가 되도록 연결한다. ==> PL <- new;
  1-2, new의 값(500)을 참조변수 last에 저장하여 last가 리스트 PL의 마지막 노드인 노드 NEW를 가리키도록 지정한다. 
  2, 다항식 리스트 PL이 공백 리스트가 아닌 경우에는 새 노드 new를 리스트 PL의 마지막 노드로 삽입한다. ==> else
  2-1, new의 값(500)을 노드 last의 링크(last.link)에 저장하여 노드 new를 last가 참조하는 노드의 다음 노드로 연결한다. ==> last.link <- new;
  2-2, new의 값(500)을 참조변수 last에 저장하여 노드 new를 리스트 PL의 마지막 노드로 지정한다. ==> last <- new;

- 다항식끼리의 덧셈 연산
  두 다항식의 덧셈 A(x)+B(x)=C(x)를 "단순 연결 리스트 자료구조"를 사용하여 해결하는 방법을 생각해보자.
  단순 연결 리스트를 이용한 다항식에서는 각 항을 이동하면서 지수를 비교하기 위해서 참조변수와 노드의 링크 필드를 이용한다.
  다항식 A(x), B(x), 그리고 C(x)의 항을 지시하기 위해서 세 개의 참조변수를 사용한다.
  참조변수 p는 다항식 A(x)에서 비교할 항을 가리키고, 참조변수 q는 다항식 B(x)에서 비교할 항을 가리킨다.
  그리고 덧셈 연산결과 만들어지는 다항식 C(x)의 항을 지시하기 위해서 참조변수 r을 사용한다.
  다항식 A(x)의 항의 지수(p.expo)와 다항식 B(x)의 항의 지수(q.expo)를 비교하여 다음의 세 가지 경우를 구분하여 처리한다.
  
  1, p.expo < q.expo : 다항식 B(x) 항의 지수가 큰 경우
  두 다항식의 지수가 서로 다른 경우에는 계수의 덧셈을 할 수 없고, 지수가 높은 항부터 나열하는 다항식의 표현 규칙에 따라서
  참조변수 q가 가리키는 다항식 B(x)의 항을 C(x)의 항으로 복사한다. 그리고 q가 가리키는 항에 대한 처리가 끝났으므로
  q는 다음 노드로 이동시킨다.
  2, p.expo = q.expo : 두 항의 지수가 같은 경우
  지수가 같은 항은 계수를 더하여 C(x)의 항을 만들어야 하므로 p.coef와 q.coef를 더하여 C(x)의 항,
  즉 r.coef에 저장하고 지수가 같아야 하므로 p.expo(또는 q.expo)를 r.expo에 저장한다.
  그리고 다음 항을 비교하기 위해 p와 q를 각각 다음 노드로 이동 시킨다.
  3, p.expo > q.expo : 다항식 A(x) 항의 지수가 큰 경우
  p가 가리키는 다항식 A(x)의 항의 지수가 더 큰 경우에는 p가 가리키는 항을 C(x)의 항으로 복사한다.
  두 다항식의 모든 항에 대해서 이와 같은 지수 비교 연산을 반복하여 처리한다.
  다항식의 모든 항에 대한 처리가 끝나면, 참조변수 p와 q가 모두 null이 되고 덧셈연산은 종료된다.
  
  다음은 두 다항식의 덧셈 연산에 대한 알고리즘이다.
  위의 알고리즘에 따라 다항식 A(x)=4x^3+3x^2+5x와 B(x)=3x^4+x^3+2x+1의 덧셈 연산을 단계별로 구해보면 다음과 같다.
  1, 참조변수 p가 가리키는 4x^3항과 참조변수 q가 가리키는 3x^4항의 지수를 비교한다. p.expo < q.expo이므로 
     지수가 큰q 노드를 리스트 C에 복사하고, q는 링크를 따라서 다음 노드로 이동한다.
  2, p가 가리키는 4x^3항과 참조변수 q가 가리키는 1x^3항의 지수를 비교한다.
     p.expo = q.expo이므로 두 노드의 coef 필드값을 더하고, expo 필드값을 저장한 노드를
     만들어서 리스트 C에 추가하고, p와 q는 다음 노드로 이동한다.
  3, p가 가리키는 3x^2항과 q가 가리키는 2x1항의 지수를 비교한다.
     p.expo > q.expo이므로 지수가 큰 p 노드를 리스트 C에 복사하고, p는 다음 노드로 이동한다.
  4, p가 가리키는 5x^1항과 q가 가리키는 2x^1항의 지수를 비교한다.
  	 p.expo = q.expo이므로 두 노드의 coef 필드의 값을 더하고, expo 필드의 값을 저장하여 만든 노드를
  	 리스트 C에 추가하고, p와 q는 다음 노드로 이동한다.
  5, 참조변수 p가 null이 되었으므로 다항식 A(x)의 항에 대한 처리가 모두 끝났다.
     처리 할 항이 남아있는 다항식 B(x)의 참조변수 q가 null이 될 때까지 다항식 B(x)의 남은 모든 노드를
     복사하여 리스트 C에 추가한다.
  6, 참조변수 p와 q가 모두 null이 되었으므로 두 다항식에 대한 연산이 완료되고, 결과 다항식은
     C(x) = 3x^4 + 5x^3 + 3x^2 + 7x + 1 이 된다.
*/






